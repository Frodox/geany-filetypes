# For complete documentation of this file, please see Geany's main documentation
[styling]
# Edit these in the colorscheme .conf file instead
default=default
commentline=comment_line
number=number_1
string=string_1
character=character
word=keyword_1
triple=string_2
tripledouble=string_2
classname=type
defname=function
operator=operator
identifier=identifier_1
commentblock=comment
stringeol=string_eol
word2=keyword_2
decorator=decorator

[keywords]
primary=addr and as asm atomic bind block break case cast concept const continue converter defer discard distinct div do elif else end enum except export finally for from func generic if import in include interface is isnot iterator let macro method mixin mod nil not notin object of or out proc ptr raise ref return shl shr static template try tuple type using var when while with without xor yield
identifiers=abs AccessViolationError accumulateResult add addAndFetch addQuitProc alloc alloc0 allocCStringArray allocShared allocShared0 any appType ArithmeticError array assert AssertionError astToStr atomicDec atomicInc auto BiggestFloat BiggestInt bool byte ByteAddress card cas cchar cdouble cfloat char chr cint clamp clong clongdouble clonglong close cmp CompileDate compileOption compiles CompileTime contains copy copyMem countdown countup cpuEndian cpuRelax create createShared createSharedU createU cschar cshort csize cstring cstringArray cstringArrayToSeq cuchar cuint culong culonglong currentSourcePath cushort DeadThreadError dealloc deallocCStringArray deallocShared debugEcho dec declared declaredInScope deepCopy defined definedInScope del delete DivByZeroError doAssert each echo Endianness endOfFile equalMem errorMessageWriter Exception excl ExecIOEffect expr failedAssertImpl FieldError fieldPairs fields File FileHandle FileMode find finished float float32 float64 FloatDivByZeroError FloatInexactError FloatingPointError FloatInvalidOpError FloatOverflowError FloatUnderflowError flushFile free freeShared GC_addCycleRoot GC_disable GC_disableMarkAndSweep GC_enable GC_enableMarkAndSweep GC_fullCollect GC_getStatistics gcInvariant GC_ref GC_setStrategy GC_Strategy GC_unref getCurrentException getCurrentExceptionMsg getFileHandle getFilePos getFileSize getFreeMem getOccupiedMem getRefcount getStackTrace getTotalMem getTypeInfo globalRaiseHook gorge guarded high hostCPU hostOS inc incl IndexError Inf insert instantiationInfo int int16 int32 int64 int8 internalNew IOEffect IOError isMainModule isNil isOnStack items KeyError len LibraryError likely lines localRaiseHook locals low map max min mitems moveMem mpairs NaN nativeStackTraceSupported Natural NegInf new newException newSeq newString newStringOfCap newWideCString nimDestroyRange NimMajor NimMinor NimNode NimPatch NimVersion NoFakeVars ObjectAssignmentError ObjectConversionError off on onFailedAssert onRaise open openArray ord Ordinal OSError OutOfMemError outOfMemHook OverflowError pairs PFloat32 PFloat64 PFrame PInt32 PInt64 pointer pop Positive pred procCall programResult quit QuitFailure QuitSuccess raiseAssert range RangeError rawEnv rawProc readAll readBuffer readBytes readChar readChars readFile ReadIOEffect readLine realloc reallocShared reopen repr ReraiseError reset resize resizeShared ResourceExhaustedError RootEffect RootObj RootRef safeAdd seq set setControlCHook setCurrentException setFilePos setLen setupForeignThreadGc shallow shallowCopy shared sizeof Slice slurp SomeInteger SomeNumber SomeOrdinal SomeReal SomeSignedInt SomeUnsignedInt StackOverflowError stackTraceAvailable staticExec staticRead stderr stdin stdmsg stdout stmt string substr succ swap SystemError TaintedString TAlignType TFrame THINSTANCE TimeEffect TLibHandle toBiggestFloat toBiggestInt toFloat toInt toU16 toU32 toU8 TProcAddr TRefCount TResult TUtf16Char typed typedesc uint uint16 uint32 uint64 uint8 unlikely unsafeNew untyped ValueError varargs void WideCString write writeBuffer writeBytes writeChars writeFile WriteIOEffect writeln writeStackTrace xlen ze ze64 zeroMem peg
reserved_operators=$

[settings]
lexer_filetype=Python
extension=nim
comment_single=#
comment_use_indent=true
context_action_cmd=

[indentation]
width=2
# 0 is spaces, 1 is tabs, 2 is tab & spaces
type=0

[build-menu]
# %f will be replaced by the complete filename
# %e will be replaced by the filename without extension
# (use only one of it at one time)
FT_00_LB=_Compile
FT_00_CM=nim c -d:release "%f"
FT_00_WD=
FT_02_LB=_Lint
FT_02_CM=nim check "%f"
FT_02_WD=
error_regex=(.+nim)\(([0-9]+), ([0-9]+)
EX_00_LB=_Execute
EX_00_CM=nim c -r "%f"
EX_00_WD=
